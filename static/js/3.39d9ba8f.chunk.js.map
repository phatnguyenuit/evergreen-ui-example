{"version":3,"sources":["containers/buttons/index.tsx"],"names":["buttonAppearances","intents","ButtonsComponent","map","appearance","marginTop","majorScale","is","size","toTitleCase","display","flexWrap","gap","intent","iconBefore","EditIcon","iconAfter","ArrowRightIcon","icon","TrashIcon","iconSize","height","flexDirection","href","Buttons","memo","displayName"],"mappings":"mIAAA,2KAiBMA,EAAwC,CAAC,UAAW,UAAW,WAE/DC,EAAyB,CAAC,OAAQ,UAAW,UAAW,UAEjDC,EAA6B,kBACxC,eAAC,IAAD,WACE,cAAC,IAAD,UACGF,EAAkBG,KAAI,SAACC,GAAD,OACrB,eAAC,IAAD,CAAuBC,UAAWC,YAAW,GAA7C,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAM,IAAvB,mBAAgCC,YAC9BL,GADF,iBAGA,eAAC,IAAD,CACEC,UAAWC,YAAW,GACtBI,QAAQ,OACRC,SAAS,OACTC,IAAKN,YAAW,GAJlB,UAMGL,EAAQE,KAAI,SAACU,GAAD,OACX,cAAC,IAAD,CAAqBT,WAAYA,EAAYS,OAAQA,EAArD,SACGJ,YAAYI,IADFA,MAIf,cAAC,IAAD,CAAQT,WAAYA,EAAYU,WAAYC,IAA5C,yBAGA,cAAC,IAAD,CAAQX,WAAYA,EAAYY,UAAWC,IAA3C,6BAlBOb,QAyBf,eAAC,IAAD,CAAMC,UAAWC,YAAW,GAA5B,UACE,cAAC,IAAD,CAASE,KAAM,IAAf,0BACCR,EAAkBG,KAAI,SAACC,GAAD,OACrB,eAAC,IAAD,CAAuBC,UAAWC,YAAW,GAA7C,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAM,IAAvB,mBAAgCC,YAC9BL,GADF,iBAGA,cAAC,IAAD,CACEC,UAAWC,YAAW,GACtBI,QAAQ,OACRC,SAAS,OACTC,IAAKN,YAAW,GAJlB,SAMGL,EAAQE,KAAI,SAACU,GAAD,OACX,eAAC,IAAD,WACE,cAAC,IAAD,CACEK,KAAMC,IACNf,WAAYA,EACZS,OAAQA,EACRO,SAAU,GACVC,OAAQf,YAAW,KAErB,cAAC,IAAD,UAAOG,YAAYI,OARVA,UAXNT,SA0Bf,eAAC,IAAD,CAAMC,UAAWC,YAAW,GAA5B,UACE,cAAC,IAAD,CAASE,KAAM,IAAf,0BACCR,EAAkBG,KAAI,SAACC,GAAD,OACrB,eAAC,IAAD,CAAuBC,UAAWC,YAAW,GAA7C,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAM,IAAvB,mBAAgCC,YAC9BL,GADF,iBAGA,cAAC,IAAD,CACEC,UAAWC,YAAW,GACtBI,QAAQ,OACRC,SAAS,OACTC,IAAKN,YAAW,GAJlB,SAMGL,EAAQE,KAAI,SAACU,GAAD,OACX,eAAC,IAAD,CAAmBH,QAAQ,OAAOY,cAAc,SAAhD,UACE,cAAC,IAAD,CAEElB,WAAYA,EACZS,OAAQA,GAFHA,GAIP,cAAC,IAAD,UAAOJ,YAAYI,OANVA,UAXNT,SAwBf,eAAC,IAAD,CAAMC,UAAWC,YAAW,GAA5B,UACE,cAAC,IAAD,CAASE,KAAM,IAAf,0BACCR,EAAkBG,KAAI,SAACC,GAAD,OACrB,eAAC,IAAD,CAAuBC,UAAWC,YAAW,GAA7C,UACE,cAAC,IAAD,CAASC,GAAG,KAAKC,KAAM,IAAvB,mBAAgCC,YAC9BL,GADF,iBAGA,cAAC,IAAD,CACEC,UAAWC,YAAW,GACtBI,QAAQ,OACRC,SAAS,OACTC,IAAKN,YAAW,GAJlB,SAMGL,EAAQE,KAAI,SAACU,GAAD,OACX,eAAC,IAAD,CAAmBH,QAAQ,OAAOY,cAAc,SAAhD,UACE,cAAC,IAAD,CAEEf,GAAG,IACHgB,KAAK,IACLnB,WAAYA,EACZS,OAAQA,EALV,iBACOA,GAQP,cAAC,IAAD,UAAOJ,YAAYI,OAVVA,UAXNT,aA+BboB,EAAUC,eAAKvB,GACrBsB,EAAQE,YAAc,UAEPF","file":"static/js/3.39d9ba8f.chunk.js","sourcesContent":["import React, { memo } from 'react';\nimport {\n  ArrowRightIcon,\n  Button,\n  ButtonAppearance,\n  EditIcon,\n  Heading,\n  IntentTypes,\n  Pane,\n  majorScale,\n  Text,\n  TrashIcon,\n  IconButton,\n  BackButton,\n} from 'evergreen-ui';\nimport { toTitleCase } from 'utils/string';\n\nconst buttonAppearances: ButtonAppearance[] = ['default', 'minimal', 'primary'];\n\nconst intents: IntentTypes[] = ['none', 'success', 'warning', 'danger'];\n\nexport const ButtonsComponent: React.FC = () => (\n  <Pane>\n    <Pane>\n      {buttonAppearances.map((appearance) => (\n        <Pane key={appearance} marginTop={majorScale(2)}>\n          <Heading is=\"h3\" size={500}>{`${toTitleCase(\n            appearance,\n          )} Appearance`}</Heading>\n          <Pane\n            marginTop={majorScale(1)}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            gap={majorScale(2)}\n          >\n            {intents.map((intent) => (\n              <Button key={intent} appearance={appearance} intent={intent}>\n                {toTitleCase(intent)}\n              </Button>\n            ))}\n            <Button appearance={appearance} iconBefore={EditIcon}>\n              Icon Before\n            </Button>\n            <Button appearance={appearance} iconAfter={ArrowRightIcon}>\n              Icon After\n            </Button>\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading size={700}>Icon Buttons</Heading>\n      {buttonAppearances.map((appearance) => (\n        <Pane key={appearance} marginTop={majorScale(2)}>\n          <Heading is=\"h3\" size={500}>{`${toTitleCase(\n            appearance,\n          )} Appearance`}</Heading>\n          <Pane\n            marginTop={majorScale(1)}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            gap={majorScale(2)}\n          >\n            {intents.map((intent) => (\n              <Pane key={intent}>\n                <IconButton\n                  icon={TrashIcon}\n                  appearance={appearance}\n                  intent={intent}\n                  iconSize={16}\n                  height={majorScale(4)}\n                />\n                <Text>{toTitleCase(intent)}</Text>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading size={700}>Back Buttons</Heading>\n      {buttonAppearances.map((appearance) => (\n        <Pane key={appearance} marginTop={majorScale(2)}>\n          <Heading is=\"h3\" size={500}>{`${toTitleCase(\n            appearance,\n          )} Appearance`}</Heading>\n          <Pane\n            marginTop={majorScale(1)}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            gap={majorScale(2)}\n          >\n            {intents.map((intent) => (\n              <Pane key={intent} display=\"flex\" flexDirection=\"column\">\n                <BackButton\n                  key={intent}\n                  appearance={appearance}\n                  intent={intent}\n                />\n                <Text>{toTitleCase(intent)}</Text>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading size={700}>Link Buttons</Heading>\n      {buttonAppearances.map((appearance) => (\n        <Pane key={appearance} marginTop={majorScale(2)}>\n          <Heading is=\"h3\" size={500}>{`${toTitleCase(\n            appearance,\n          )} Appearance`}</Heading>\n          <Pane\n            marginTop={majorScale(1)}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            gap={majorScale(2)}\n          >\n            {intents.map((intent) => (\n              <Pane key={intent} display=\"flex\" flexDirection=\"column\">\n                <Button\n                  key={intent}\n                  is=\"a\"\n                  href=\"#\"\n                  appearance={appearance}\n                  intent={intent}\n                >\n                  Link\n                </Button>\n                <Text>{toTitleCase(intent)}</Text>\n              </Pane>\n            ))}\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n  </Pane>\n);\n\nconst Buttons = memo(ButtonsComponent);\nButtons.displayName = 'Buttons';\n\nexport default Buttons;\n"],"sourceRoot":""}