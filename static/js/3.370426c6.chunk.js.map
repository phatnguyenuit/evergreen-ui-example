{"version":3,"sources":["../../../../src/icons/src/IconWrapper.js","../../../../src/spinner/src/Spinner.js","../../../../src/buttons/src/Button.js","../../../../src/icons/src/Icon.js","../../../../src/icons/generated/EditIcon.js","../../../../src/icons/generated/ArrowRightIcon.js","../../../../src/buttons/src/IconButton.js","../../../../src/icons/generated/TrashIcon.js","../../../../src/icons/generated/ArrowLeftIcon.js","../../../../src/buttons/src/BackButton.js","containers/buttons/index.tsx"],"names":["IconWrapper","memo","forwardRef","icon","color","size","title","props","iconProps","iconWithProps","ReactIs","Component","ref","React","display","PropTypes","string","loadingKeyframes","transform","loadingCircleKeyframes","strokeDashoffset","outerClass","animation","Spinner","delay","theme","useTheme","useState","isVisible","setIsVisible","useEffect","delayTimer","setTimeout","clearTimeout","width","height","lineHeight","is","className","x","y","viewBox","strokeDasharray","strokeWidth","strokeMiterlimit","strokeLinecap","stroke","fill","cx","cy","r","Box","number","ButtonIcon","spacing","edge","edgeMargin","Math","innerMargin","marginLeft","marginRight","styles","position","fontFamily","fontWeight","alignItems","flexWrap","Button","intent","isActive","children","disabled","appearance","isLoading","paddingRight","paddingLeft","paddingTop","paddingBottom","iconBefore","iconAfter","restProps","themedClassName","textSize","borderRadius","iconSize","padding","pr","pl","borderTopRightRadius","borderBottomRightRadius","borderTopLeftRadius","borderBottomLeftRadius","marginTop","marginBottom","dimensions","layout","emptyObject","Icon","name","style","svgPaths16","svgPaths20","svgProps","pixelGridSize","paths","key","d","fillRule","useMemo","data-icon","isRequired","EditIcon","ArrowRightIcon","IconButton","justifyContent","TrashIcon","ArrowLeftIcon","BackButton","buttonAppearances","intents","ButtonsComponent","intentColors","colors","Pane","map","majorScale","Heading","toTitleCase","gap","Text","flexDirection","href","Buttons","displayName"],"mappings":"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","file":"static/js/3.370426c6.chunk.js","sourcesContent":["import React, { forwardRef, memo } from 'react'\nimport PropTypes from 'prop-types'\nimport ReactIs from 'react-is'\nimport Box from 'ui-box'\n\n/**\n * This is an internal helper component for rendering custom or Evergreen icons\n * Box props are applied to the outer Box container, and Evergreen icon-specific props are added to the icon element.\n */\nexport const IconWrapper = memo(\n  forwardRef(function Icon(\n    { icon, color, size, title, ...props },\n    ref\n  ) {\n    if (!icon || typeof icon === 'string') {\n      return null\n    }\n\n    const iconProps = {\n      color,\n      size,\n      title,\n    }\n\n    let iconWithProps = null\n    if (ReactIs.isValidElementType(icon)) {\n      const Component = icon\n      iconWithProps = <Component ref={ref} {...iconProps} />\n    } else if (React.isValidElement(icon)) {\n      iconWithProps = React.cloneElement(icon, { ...iconProps, ...icon.props, ref })\n    }\n\n    return (\n      <Box display=\"inline-flex\" {...props}>\n        {iconWithProps}\n      </Box>\n    )\n  })\n)\n\nIconWrapper.propTypes = {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * The icon component - whether an Evergreen icon or a custom icon node:\n   *\n   * - If `null` or `undefined` or `false`, this component will render nothing.\n   * - If given a `JSX.Element`, that element will be rendered, with size/color/title props cloned into it\n   * - If given a React element type, it will be rendered with the other icon props\n   *   As a consumer, you should never use `<IconWrapper icon={<element />}` directly; simply render `<element />` instead.\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Size of the icon, in pixels.\n   * Icons contains 16px and 20px SVG icon paths,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string\n}\n","import React, { useState, useEffect, forwardRef, memo } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useTheme } from '../../theme'\n\nconst loadingKeyframes = css.keyframes('loading', {\n  '0%': {\n    transform: 'rotate(0)'\n  },\n  '100%': {\n    transform: 'rotate(360deg)'\n  }\n})\n\nconst loadingCircleKeyframes = css.keyframes('loading-circle', {\n  '0%': {\n    strokeDashoffset: 600\n  },\n  '100%': {\n    strokeDashoffset: 0\n  }\n})\n\nconst outerClass = css({\n  animation: `${loadingKeyframes} 2s linear infinite`\n}).toString()\n\nconst innerClass = color =>\n  css({\n    strokeDashoffset: 600,\n    strokeDasharray: 300,\n    strokeWidth: 12,\n    strokeMiterlimit: 10,\n    strokeLinecap: 'round',\n    animation: `${loadingCircleKeyframes} 1.6s cubic-bezier(0.4, 0.15, 0.6, 0.85) infinite`,\n    stroke: color,\n    fill: 'transparent'\n  }).toString()\n\nconst Spinner = memo(\n  forwardRef(function Spinner({ delay = 0, size = 40, ...props }, ref) {\n    const theme = useTheme()\n    const [isVisible, setIsVisible] = useState(delay === 0)\n\n    useEffect(() => {\n      let delayTimer = null\n      if (delay > 0) {\n        delayTimer = setTimeout(() => {\n          setIsVisible(true)\n        }, delay)\n      }\n\n      return function() {\n        clearTimeout(delayTimer)\n      }\n    }, [])\n\n    if (!isVisible) {\n      return null\n    }\n\n    return (\n      <Box width={size} height={size} lineHeight={0} {...props} ref={ref}>\n        <Box\n          is=\"svg\"\n          className={outerClass}\n          x=\"0px\"\n          y=\"0px\"\n          viewBox=\"0 0 150 150\"\n        >\n          <Box\n            is=\"circle\"\n            className={innerClass(theme.spinnerColor)}\n            cx=\"75\"\n            cy=\"75\"\n            r=\"60\"\n          />\n        </Box>\n      </Box>\n    )\n  })\n)\n\nSpinner.propTypes = {\n  /**\n   * Composes the Box component as the base.\n   */\n  ...Box.propTypes,\n\n  /**\n   * Delay after which spinner should be visible.\n   */\n  delay: PropTypes.number,\n\n  /**\n   * The size of the spinner.\n   */\n  size: PropTypes.number\n}\n\nexport default Spinner\n","import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport cx from 'classnames'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport { Text } from '../../typography'\nimport { Spinner } from '../../spinner'\nimport { useTheme } from '../../theme'\n\n/* eslint-disable-next-line react/prop-types */\nconst ButtonIcon = memo(function ButtonIcon({ icon, size, spacing, edge }) {\n  if (!icon) return null\n\n  const edgeMargin = -Math.round(spacing * 0.2)\n  const innerMargin = Math.round(size * 0.7)\n  const marginLeft = edge === 'start' ? edgeMargin : innerMargin\n  const marginRight = edge === 'end' ? edgeMargin : innerMargin\n\n  return (\n    <IconWrapper\n      icon={icon}\n      size={size}\n      marginLeft={marginLeft}\n      marginRight={marginRight}\n    />\n  )\n})\n\nconst styles = {\n  position: 'relative',\n  fontFamily: 'ui',\n  fontWeight: 500,\n  display: 'inline-flex',\n  alignItems: 'center',\n  flexWrap: 'nowrap'\n}\n\nconst Button = memo(\n  forwardRef(function Button(props, ref) {\n    const theme = useTheme()\n\n    const {\n      className,\n\n      intent = 'none',\n      height = 32,\n      isActive = false,\n      children,\n      disabled,\n      appearance = 'default',\n      isLoading,\n\n      // Paddings\n      paddingRight,\n      paddingLeft,\n      paddingTop = 0,\n      paddingBottom = 0,\n\n      // Icons\n      iconBefore,\n      iconAfter,\n\n      ...restProps\n    } = props\n\n    const themedClassName = theme.getButtonClassName(appearance, intent)\n    const textSize = theme.getTextSizeForControlHeight(height)\n\n    const borderRadius = theme.getBorderRadiusForControlHeight(height)\n    const iconSize = theme.getIconSizeForButton(height)\n\n    const padding = Math.round(height / 2)\n    const pr = paddingRight !== undefined ? paddingRight : padding // eslint-disable-line no-negated-condition\n    const pl = paddingLeft !== undefined ? paddingLeft : padding // eslint-disable-line no-negated-condition\n\n    return (\n      <Text\n        is=\"button\"\n        ref={ref}\n        className={cx(themedClassName, className)}\n        borderTopRightRadius={borderRadius}\n        borderBottomRightRadius={borderRadius}\n        borderTopLeftRadius={borderRadius}\n        borderBottomLeftRadius={borderRadius}\n        paddingTop={paddingTop}\n        paddingBottom={paddingBottom}\n        paddingRight={pr}\n        paddingLeft={pl}\n        marginLeft={0} // Removes weird margins in Safari\n        marginRight={0} // Removes weird margins in Safari\n        marginTop={0} // Removes weird margins in Safari\n        marginBottom={0} // Removes weird margins in Safari\n        size={textSize}\n        color={null} // Prevent the Text color overriding the glamor appearanceStyle color\n        height={height}\n        lineHeight={`${height}px`}\n        {...(isActive ? { 'data-active': true } : {})}\n        {...styles}\n        {...restProps}\n        disabled={disabled || isLoading}\n      >\n        {isLoading && (\n          <Spinner\n            marginLeft={-Math.round(height / 8)}\n            marginRight={Math.round(height / 4)}\n            size={Math.round(height / 2)}\n          />\n        )}\n        <ButtonIcon\n          icon={iconBefore}\n          size={iconSize}\n          spacing={pl}\n          edge=\"start\"\n        />\n        {children}\n        <ButtonIcon icon={iconAfter} size={iconSize} spacing={pr} edge=\"end\" />\n      </Text>\n    )\n  })\n)\n\nButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * When true, show a loading spinner before the children.\n   * This also disables the button.\n   */\n  isLoading: PropTypes.bool,\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * Sets an icon before the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconBefore: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Sets an icon after the text. Can be any icon from Evergreen or a custom element.\n   */\n  iconAfter: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default Button\n","import React, { forwardRef, useMemo } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { useTheme } from '../../theme'\n\n/**\n * This implementation is a remix of the Icon component in Blueprintjs:\n * https://github.com/palantir/blueprint/blob/813e93f2/packages/core/src/components/icon/icon.tsx#L15\n * Refer to the LICENSE for BlueprintJS here: https://github.com/palantir/blueprint/blob/develop/LICENSE\n */\n\nconst emptyObject = {}\n\nconst Icon = forwardRef(function Icon(\n  {\n    color = 'currentColor',\n    size = 16,\n    name,\n    title,\n    style = emptyObject,\n    svgPaths16,\n    svgPaths20,\n    ...svgProps\n  },\n  ref\n) {\n  const theme = useTheme()\n  const SIZE_STANDARD = 16\n  const SIZE_LARGE = 20\n\n  // Choose which pixel grid is most appropriate for given icon size\n  const pixelGridSize = size >= SIZE_LARGE ? SIZE_LARGE : SIZE_STANDARD\n  const pathStrings = pixelGridSize === SIZE_STANDARD ? svgPaths16 : svgPaths20\n  const paths = pathStrings.map((d, i) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <path key={i} d={d} fillRule=\"evenodd\" />\n  ))\n\n  const viewBox = `0 0 ${pixelGridSize} ${pixelGridSize}`\n\n  const styles = useMemo(() => {\n    return color ? { ...style, fill: theme.getIconColor(color) } : style\n  }, [style, color])\n\n  return (\n    <Box\n      is=\"svg\"\n      ref={ref}\n      {...svgProps}\n      data-icon={name}\n      style={styles}\n      width={size}\n      height={size}\n      viewBox={viewBox}\n    >\n      {title && <title>{title}</title>}\n      {paths}\n    </Box>\n  )\n})\n\nIcon.propTypes = {\n  /**\n   * Color of icon. Equivalent to setting CSS `fill` property.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Size of the icon, in pixels.\n   * Blueprint contains 16px and 20px SVG icon images,\n   * and chooses the appropriate resolution based on this prop.\n   */\n  size: PropTypes.number,\n\n  /**\n   * Name of the icon\n   */\n  name: PropTypes.string,\n\n  /**\n   * Description string.\n   * Browsers usually render this as a tooltip on hover, whereas screen\n   * readers will use it for aural feedback.\n   * By default, this is set to the icon's name for accessibility.\n   */\n  title: PropTypes.string,\n\n  /**\n   * CSS style properties.\n   */\n  style: PropTypes.object,\n\n  svgPaths16: PropTypes.arrayOf(PropTypes.string).isRequired,\n\n  svgPaths20: PropTypes.arrayOf(PropTypes.string).isRequired\n}\n\nexport default Icon\n","import React, { memo, forwardRef } from 'react'\nimport Icon from '../src/Icon'\n\nconst svgPaths16 = [\n  'M3.25 10.26l2.47 2.47 6.69-6.69-2.46-2.48-6.7 6.7zM.99 14.99l3.86-1.39-2.46-2.44-1.4 3.83zm12.25-14c-.48 0-.92.2-1.24.51l-1.44 1.44 2.47 2.47 1.44-1.44c.32-.32.51-.75.51-1.24.01-.95-.77-1.74-1.74-1.74z'\n]\nconst svgPaths20 = [\n  'M4.59 12.59l2.83 2.83 7.65-7.65-2.83-2.83-7.65 7.65zM2 18l4.41-1.59-2.81-2.79L2 18zM16 2c-.55 0-1.05.22-1.41.59l-1.65 1.65 2.83 2.83 1.65-1.65A2.006 2.006 0 0016 2z'\n]\n\nexport const EditIcon = memo(\n  forwardRef(function EditIcon(props, ref) {\n    return (\n      <Icon\n        svgPaths16={svgPaths16}\n        svgPaths20={svgPaths20}\n        ref={ref}\n        name=\"edit\"\n        {...props}\n      />\n    )\n  })\n)\n","import React, { memo, forwardRef } from 'react'\nimport Icon from '../src/Icon'\n\nconst svgPaths16 = [\n  'M14.7 7.29l-5-5a.965.965 0 00-.71-.3 1.003 1.003 0 00-.71 1.71l3.29 3.29H1.99c-.55 0-1 .45-1 1s.45 1 1 1h9.59l-3.29 3.29a1.003 1.003 0 001.42 1.42l5-5c.18-.18.29-.43.29-.71s-.12-.52-.3-.7z'\n]\nconst svgPaths20 = [\n  'M18.71 9.29l-6-6a1.003 1.003 0 00-1.42 1.42L15.59 9H2c-.55 0-1 .45-1 1s.45 1 1 1h13.59l-4.29 4.29c-.19.18-.3.43-.3.71a1.003 1.003 0 001.71.71l6-6c.18-.18.29-.43.29-.71 0-.28-.11-.53-.29-.71z'\n]\n\nexport const ArrowRightIcon = memo(\n  forwardRef(function ArrowRightIcon(props, ref) {\n    return (\n      <Icon\n        svgPaths16={svgPaths16}\n        svgPaths20={svgPaths20}\n        ref={ref}\n        name=\"arrow-right\"\n        {...props}\n      />\n    )\n  })\n)\n","import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport { dimensions, spacing, position, layout } from 'ui-box'\nimport { useTheme } from '../../theme'\nimport { IconWrapper } from '../../icons/src/IconWrapper'\nimport Button from './Button'\n\nconst IconButton = memo(\n  forwardRef(function IconButton(props, ref) {\n    const theme = useTheme()\n    const { icon, iconSize, height = 32, intent = 'none', ...restProps } = props\n\n    return (\n      <Button\n        ref={ref}\n        intent={intent}\n        height={height}\n        width={height}\n        paddingLeft={0}\n        paddingRight={0}\n        display=\"flex\"\n        justifyContent=\"center\"\n        {...restProps}\n      >\n        <IconWrapper\n          icon={icon}\n          color={intent === 'none' ? 'default' : 'currentColor'}\n          size={iconSize || theme.getIconSizeForIconButton(height)}\n        />\n      </Button>\n    )\n  })\n)\n\nIconButton.propTypes = {\n  /**\n   * Composes the dimensions spec from the Box primitive.\n   */\n  ...dimensions.propTypes,\n\n  /**\n   * Composes the spacing spec from the Box primitive.\n   */\n  ...spacing.propTypes,\n\n  /**\n   * Composes the position spec from the Box primitive.\n   */\n  ...position.propTypes,\n\n  /**\n   * Composes the layout spec from the Box primitive.\n   */\n  ...layout.propTypes,\n\n  /**\n   * The Evergreen icon or custom icon to render\n   */\n  icon: PropTypes.oneOfType([PropTypes.elementType, PropTypes.element]),\n\n  /**\n   * Specifies an explicit icon size instead of the default value\n   */\n  iconSize: PropTypes.number,\n\n  /**\n   * The intent of the button.\n   */\n  intent: PropTypes.oneOf(['none', 'success', 'warning', 'danger']),\n\n  /**\n   * The appearance of the button.\n   */\n  appearance: PropTypes.oneOf(['default', 'minimal', 'primary']),\n\n  /**\n   * Forcefully set the active state of a button.\n   * Useful in conjuction with a Popover.\n   */\n  isActive: PropTypes.bool,\n\n  /**\n   * When true, the button is disabled.\n   * isLoading also sets the button to disabled.\n   */\n  disabled: PropTypes.bool,\n\n  /**\n   * Class name passed to the button.\n   * Only use if you know what you are doing.\n   */\n  className: PropTypes.string\n}\n\nexport default IconButton\n","import React, { memo, forwardRef } from 'react'\nimport Icon from '../src/Icon'\n\nconst svgPaths16 = [\n  'M14.49 3.99h-13c-.28 0-.5.22-.5.5s.22.5.5.5h.5v10c0 .55.45 1 1 1h10c.55 0 1-.45 1-1v-10h.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5zm-8.5 9c0 .55-.45 1-1 1s-1-.45-1-1v-6c0-.55.45-1 1-1s1 .45 1 1v6zm3 0c0 .55-.45 1-1 1s-1-.45-1-1v-6c0-.55.45-1 1-1s1 .45 1 1v6zm3 0c0 .55-.45 1-1 1s-1-.45-1-1v-6c0-.55.45-1 1-1s1 .45 1 1v6zm2-12h-4c0-.55-.45-1-1-1h-2c-.55 0-1 .45-1 1h-4c-.55 0-1 .45-1 1v1h14v-1c0-.55-.45-1-1-1z'\n]\nconst svgPaths20 = [\n  'M17 1h-5c0-.55-.45-1-1-1H9c-.55 0-1 .45-1 1H3c-.55 0-1 .45-1 1v1h16V2c0-.55-.45-1-1-1zm.5 3h-15c-.28 0-.5.22-.5.5s.22.5.5.5H3v14c0 .55.45 1 1 1h12c.55 0 1-.45 1-1V5h.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5zM7 16c0 .55-.45 1-1 1s-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v8zm4 0c0 .55-.45 1-1 1s-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v8zm4 0c0 .55-.45 1-1 1s-1-.45-1-1V8c0-.55.45-1 1-1s1 .45 1 1v8z'\n]\n\nexport const TrashIcon = memo(\n  forwardRef(function TrashIcon(props, ref) {\n    return (\n      <Icon\n        svgPaths16={svgPaths16}\n        svgPaths20={svgPaths20}\n        ref={ref}\n        name=\"trash\"\n        {...props}\n      />\n    )\n  })\n)\n","import React, { memo, forwardRef } from 'react'\nimport Icon from '../src/Icon'\n\nconst svgPaths16 = [\n  'M13.99 6.99H4.41L7.7 3.7a1.003 1.003 0 00-1.42-1.42l-5 5a1.014 1.014 0 000 1.42l5 5a1.003 1.003 0 001.42-1.42L4.41 8.99H14c.55 0 1-.45 1-1s-.46-1-1.01-1z'\n]\nconst svgPaths20 = [\n  'M18 9H4.41L8.7 4.71c.19-.18.3-.43.3-.71a1.003 1.003 0 00-1.71-.71l-6 6c-.18.18-.29.43-.29.71 0 .28.11.53.29.71l6 6a1.003 1.003 0 001.42-1.42L4.41 11H18c.55 0 1-.45 1-1s-.45-1-1-1z'\n]\n\nexport const ArrowLeftIcon = memo(\n  forwardRef(function ArrowLeftIcon(props, ref) {\n    return (\n      <Icon\n        svgPaths16={svgPaths16}\n        svgPaths20={svgPaths20}\n        ref={ref}\n        name=\"arrow-left\"\n        {...props}\n      />\n    )\n  })\n)\n","import React, { forwardRef, memo } from 'react'\nimport { ArrowLeftIcon } from '../../icons'\nimport Button from './Button'\n\nconst BackButton = memo(\n  forwardRef(function BackButton({ children = 'Back', ...props }, ref) {\n    return (\n      <Button iconBefore={ArrowLeftIcon} {...props} ref={ref}>\n        {children}\n      </Button>\n    )\n  })\n)\n\nBackButton.propTypes = {\n  /** Composes the Button component as the base. */\n  ...Button.propTypes\n}\n\nexport default BackButton\n","import React, { memo } from 'react';\nimport {\n  ArrowRightIcon,\n  BackButton,\n  Button,\n  ButtonAppearance,\n  EditIcon,\n  Heading,\n  IconButton,\n  IntentTypes,\n  majorScale,\n  Pane,\n  Text,\n  TrashIcon,\n} from 'evergreen-ui';\nimport { toTitleCase } from 'utils/string';\nimport useTheme from 'hooks/useTheme';\n\nconst buttonAppearances: ButtonAppearance[] = ['default', 'minimal', 'primary'];\n\nconst intents: IntentTypes[] = ['none', 'success', 'warning', 'danger'];\n\nexport const ButtonsComponent: React.FC = () => {\n  const {\n    colors: { intent: intentColors },\n  } = useTheme();\n\n  return (\n    <Pane>\n      <Pane>\n        {buttonAppearances.map((appearance) => (\n          <Pane key={appearance} marginTop={majorScale(2)}>\n            <Heading is=\"h3\" size={500}>{`${toTitleCase(\n              appearance,\n            )} Appearance`}</Heading>\n            <Pane\n              marginTop={majorScale(1)}\n              display=\"flex\"\n              flexWrap=\"wrap\"\n              gap={majorScale(2)}\n            >\n              {intents.map((intent) => (\n                <Button key={intent} appearance={appearance} intent={intent}>\n                  {toTitleCase(intent)}\n                </Button>\n              ))}\n              <Button appearance={appearance} iconBefore={EditIcon}>\n                Icon Before\n              </Button>\n              <Button appearance={appearance} iconAfter={ArrowRightIcon}>\n                Icon After\n              </Button>\n            </Pane>\n          </Pane>\n        ))}\n      </Pane>\n      <Pane marginTop={majorScale(3)}>\n        <Heading size={700}>Icon Buttons</Heading>\n        {buttonAppearances.map((appearance) => (\n          <Pane key={appearance} marginTop={majorScale(2)}>\n            <Heading is=\"h3\" size={500}>{`${toTitleCase(\n              appearance,\n            )} Appearance`}</Heading>\n            <Pane\n              marginTop={majorScale(1)}\n              display=\"flex\"\n              flexWrap=\"wrap\"\n              gap={majorScale(2)}\n            >\n              {intents.map((intent) => (\n                <Pane key={intent}>\n                  <IconButton\n                    icon={TrashIcon}\n                    appearance={appearance}\n                    intent={intent}\n                    iconSize={16}\n                    height={majorScale(4)}\n                  />\n                  <Text color={intentColors[intent]}>\n                    {toTitleCase(intent)}\n                  </Text>\n                </Pane>\n              ))}\n            </Pane>\n          </Pane>\n        ))}\n      </Pane>\n      <Pane marginTop={majorScale(3)}>\n        <Heading size={700}>Back Buttons</Heading>\n        {buttonAppearances.map((appearance) => (\n          <Pane key={appearance} marginTop={majorScale(2)}>\n            <Heading is=\"h3\" size={500}>{`${toTitleCase(\n              appearance,\n            )} Appearance`}</Heading>\n            <Pane\n              marginTop={majorScale(1)}\n              display=\"flex\"\n              flexWrap=\"wrap\"\n              gap={majorScale(2)}\n            >\n              {intents.map((intent) => (\n                <Pane key={intent} display=\"flex\" flexDirection=\"column\">\n                  <BackButton\n                    key={intent}\n                    appearance={appearance}\n                    intent={intent}\n                  />\n                  <Text color={intentColors[intent]}>\n                    {toTitleCase(intent)}\n                  </Text>\n                </Pane>\n              ))}\n            </Pane>\n          </Pane>\n        ))}\n      </Pane>\n      <Pane marginTop={majorScale(3)}>\n        <Heading size={700}>Link Buttons</Heading>\n        {buttonAppearances.map((appearance) => (\n          <Pane key={appearance} marginTop={majorScale(2)}>\n            <Heading is=\"h3\" size={500}>{`${toTitleCase(\n              appearance,\n            )} Appearance`}</Heading>\n            <Pane\n              marginTop={majorScale(1)}\n              display=\"flex\"\n              flexWrap=\"wrap\"\n              gap={majorScale(2)}\n            >\n              {intents.map((intent) => (\n                <Pane key={intent} display=\"flex\" flexDirection=\"column\">\n                  <Button\n                    key={intent}\n                    is=\"a\"\n                    href=\"#\"\n                    appearance={appearance}\n                    intent={intent}\n                  >\n                    Link\n                  </Button>\n                  <Text color={intentColors[intent]}>\n                    {toTitleCase(intent)}\n                  </Text>\n                </Pane>\n              ))}\n            </Pane>\n          </Pane>\n        ))}\n      </Pane>\n    </Pane>\n  );\n};\n\nconst Buttons = memo(ButtonsComponent);\nButtons.displayName = 'Buttons';\n\nexport default Buttons;\n"],"sourceRoot":""}