{"version":3,"sources":["containers lazy /^/.//.*$/ groupOptions: {} namespace object","components/app-layout/index.tsx","App.tsx","reportWebVitals.ts","index.tsx","utils/string.ts","hooks/useTheme.ts"],"names":["map","webpackAsyncContext","req","__webpack_require__","o","Promise","resolve","then","e","Error","code","ids","id","keys","Object","module","exports","pages","AppLayoutComponent","pathname","useLocation","textColors","useTheme","colors","text","activePage","useMemo","substr","getTextColor","useCallback","page","success","default","Pane","paddingX","majorScale","paddingY","Heading","is","size","marginTop","display","flexDirection","flexWrap","gap","Card","elevation","cursor","padding","Link","to","textDecoration","Text","fontWeight","color","toTitleCase","includes","fallback","Paragraph","from","exact","path","component","lazy","AppLayout","memo","displayName","App","strict","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","value","defaultTheme","document","getElementById","str","charAt","toUpperCase","toLowerCase","getStaticPath","process","useContext","ThemeContext"],"mappings":"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","file":"static/js/main.3a3fc991.chunk.js","sourcesContent":["var map = {\n\t\"./avatars\": [\n\t\t29,\n\t\t1\n\t],\n\t\"./avatars/\": [\n\t\t29,\n\t\t1\n\t],\n\t\"./avatars/index\": [\n\t\t29,\n\t\t1\n\t],\n\t\"./avatars/index.tsx\": [\n\t\t29,\n\t\t1\n\t],\n\t\"./badges\": [\n\t\t30,\n\t\t2\n\t],\n\t\"./badges/\": [\n\t\t30,\n\t\t2\n\t],\n\t\"./badges/index\": [\n\t\t30,\n\t\t2\n\t],\n\t\"./badges/index.tsx\": [\n\t\t30,\n\t\t2\n\t],\n\t\"./buttons\": [\n\t\t28,\n\t\t3\n\t],\n\t\"./buttons/\": [\n\t\t28,\n\t\t3\n\t],\n\t\"./buttons/index\": [\n\t\t28,\n\t\t3\n\t],\n\t\"./buttons/index.tsx\": [\n\t\t28,\n\t\t3\n\t],\n\t\"./canvas\": [\n\t\t26,\n\t\t4\n\t],\n\t\"./canvas/\": [\n\t\t26,\n\t\t4\n\t],\n\t\"./canvas/index\": [\n\t\t26,\n\t\t4\n\t],\n\t\"./canvas/index.tsx\": [\n\t\t26,\n\t\t4\n\t],\n\t\"./not-found\": [\n\t\t25,\n\t\t0\n\t],\n\t\"./not-found/\": [\n\t\t25,\n\t\t0\n\t],\n\t\"./not-found/index\": [\n\t\t25,\n\t\t0\n\t],\n\t\"./not-found/index.tsx\": [\n\t\t25,\n\t\t0\n\t],\n\t\"./tabs\": [\n\t\t27,\n\t\t5\n\t],\n\t\"./tabs/\": [\n\t\t27,\n\t\t5\n\t],\n\t\"./tabs/index\": [\n\t\t27,\n\t\t5\n\t],\n\t\"./tabs/index.tsx\": [\n\t\t27,\n\t\t5\n\t]\n};\nfunction webpackAsyncContext(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\treturn Promise.resolve().then(function() {\n\t\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\t\te.code = 'MODULE_NOT_FOUND';\n\t\t\tthrow e;\n\t\t});\n\t}\n\n\tvar ids = map[req], id = ids[0];\n\treturn __webpack_require__.e(ids[1]).then(function() {\n\t\treturn __webpack_require__(id);\n\t});\n}\nwebpackAsyncContext.keys = function webpackAsyncContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackAsyncContext.id = 139;\nmodule.exports = webpackAsyncContext;","import { lazy, Suspense, useCallback, useMemo, memo } from 'react';\nimport { Switch, Route, Link, useLocation, Redirect } from 'react-router-dom';\nimport { Card, Heading, majorScale, Pane, Paragraph, Text } from 'evergreen-ui';\nimport useTheme from 'hooks/useTheme';\nimport { toTitleCase } from 'utils/string';\n\nconst pages = ['buttons', 'badges', 'tabs', 'avatars', 'canvas'] as const;\ntype Page = typeof pages[number];\n\nexport const AppLayoutComponent: React.FC = () => {\n  const { pathname } = useLocation();\n  const {\n    colors: { text: textColors },\n  } = useTheme();\n  const activePage = useMemo(() => pathname.substr(1), [pathname]);\n\n  const getTextColor = useCallback(\n    (page: Page) => {\n      if (page === activePage) return textColors.success;\n      return textColors.default;\n    },\n    [activePage, textColors.default, textColors.success],\n  );\n  return (\n    <Pane paddingX={majorScale(2)} paddingY={majorScale(3)}>\n      <Heading is=\"h1\" size={800}>\n        Evergreen UI\n      </Heading>\n      <Pane\n        marginTop={majorScale(2)}\n        display=\"flex\"\n        flexDirection=\"row\"\n        flexWrap=\"wrap\"\n        gap={majorScale(2)}\n      >\n        {pages.map((page) => (\n          <Card\n            key={page}\n            elevation={1}\n            cursor=\"pointer\"\n            padding={majorScale(2)}\n            is={Link}\n            to={page}\n            textDecoration=\"none\"\n          >\n            <Text fontWeight=\"bold\" color={getTextColor(page)}>\n              {toTitleCase(page)}\n            </Text>\n          </Card>\n        ))}\n      </Pane>\n      <Pane marginTop={majorScale(3)}>\n        <Heading is=\"h2\" size={700}>\n          {pages.includes(activePage as Page)\n            ? toTitleCase(activePage)\n            : 'Not Found'}\n        </Heading>\n        <Suspense\n          fallback={<Paragraph>{`Loading page \"${activePage}\"`}</Paragraph>}\n        >\n          <Switch>\n            <Redirect from=\"/\" to=\"/buttons\" exact />\n            {pages.map((page) => (\n              <Route\n                exact\n                key={page}\n                path={`/${page}`}\n                component={lazy(() => import(`containers/${page}`))}\n              />\n            ))}\n            <Route component={lazy(() => import(`containers/not-found`))} />\n          </Switch>\n        </Suspense>\n      </Pane>\n    </Pane>\n  );\n};\n\nconst AppLayout = memo(AppLayoutComponent);\nAppLayout.displayName = 'AppLayout';\n\nexport default AppLayout;\n","import { Switch, Route } from 'react-router-dom';\nimport AppLayout from 'components/app-layout';\n\nfunction App() {\n  return (\n    <main>\n      <Switch>\n        <Route path=\"/\" strict>\n          <AppLayout />\n        </Route>\n      </Switch>\n    </main>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\nimport { ThemeProvider, defaultTheme } from 'evergreen-ui';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <ThemeProvider value={defaultTheme}>\n        <App />\n      </ThemeProvider>\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const toTitleCase = (str: string) =>\n  str.charAt(0).toUpperCase() + str.substr(1).toLowerCase();\n\nexport const getStaticPath = (path: string) => {\n  return `${process.env.PUBLIC_URL}${path}`;\n};\n","import { useContext } from 'react';\nimport { ThemeContext } from 'evergreen-ui';\n\nconst useTheme = () => {\n  return useContext(ThemeContext);\n};\n\nexport default useTheme;\n"],"sourceRoot":""}