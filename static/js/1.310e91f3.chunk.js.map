{"version":3,"sources":["../../../../src/image/src/Image.js","../../../../../src/avatar/src/utils/getInitials.js","../../../../src/avatar/src/Avatar.js","../../../../../src/avatar/src/utils/hash.js","containers/avatars/index.tsx"],"names":["Image","memo","forwardRef","props","ref","is","Box","src","PropTypes","string","fallback","name","v","isObjectFitSupported","document","initialsStyleClass","top","position","display","alignItems","justifyContent","lineHeight","getColorProps","isSolid","theme","color","propsHashValue","hashValue","s","str","String","hash","i","char","Math","globalHash","Avatar","size","forceShowInitials","sizeLimitOneCharacter","getInitials","restProps","useTheme","useState","imageHasFailedLoading","setImageHasFailedLoading","imageUnavailable","colorProps","initialsFontSize","initials","width","height","overflow","borderRadius","flexShrink","backgroundColor","title","className","fontSize","style","objectFit","onError","number","AvatarsComponent","Pane","map","solid","marginTop","majorScale","Heading","marginBottom","gap","Avatars","displayName"],"mappings":"w3BAIA,IAAMA,EAAQC,eACZC,sBAAW,SAAeC,EAAOC,GAC/B,OAAO,mCAAKC,GAAG,OAAR,GAAyBD,IAAKA,SAIzCJ,mBACKM,IADLN,eAEEO,IAAKC,IAAUC,SAGjB,Q,iBCfe,SAAS,EAAT,GAA2C,IAAhBC,EAAgB,uDAAL,IACnD,OAAKC,GAAL,kBAAoBA,EACbA,EAAA,8CAIA,SAAAC,GAAC,OAAIA,GAAKA,KAAT,iBAJD,KAAP,IAD8CF,ECShD,IAAMG,EACgB,qBAAbC,UACP,cAAeA,yBAFjB,MAIMC,EAAqB,cAAI,CAC7BC,IAD6B,EAE7BC,SAF6B,WAG7BC,QAH6B,OAI7BC,WAJ6B,SAK7BC,eAL6B,SAM7BC,WAAY,IANd,WASA,SAASC,EAAc,GAAiD,IAA/CC,EAA+C,EAA/CA,QAASC,EAAsC,EAAtCA,MAAOC,EAA+B,EAA/BA,MAAOd,EAAwB,EAAxBA,KAAMe,EAAkB,EAAlBA,eACpD,iBAAID,EAAuB,CACzB,IAAME,ECxBK,SAAkBC,GAC/B,IAAMC,EAAMC,OAAZ,GACIC,EAAJ,EAEA,OAAIF,gBAAyB,OAAOE,EACpC,IAAK,IAAIC,EAAT,EAAgBA,EAAIH,EAApB,OAAgCG,IAE9BD,GAAQA,GAAD,KADAF,aAAPI,GAGAF,KAGF,OAAOG,SAAP,GDYoBC,CAAWT,GAA7B,GACA,OAAOF,EAAA,eAAqB,CAAED,QAAF,EAAWE,MAAX,EAAkBE,cAGhD,OAAOH,EAAA,eAAqB,CAAED,QAAF,EAAWE,UAGzC,IAAMW,EAASnC,eACbC,sBAAW,SAAgBC,EAAOC,GAAK,IAEnCG,EAUEJ,EAZiC,IAGnCQ,EASER,EAZiC,OAYjCA,EAZiC,KAInCkC,OAJmC,aAYjClC,EAZiC,QAKnCoB,OALmC,WAYjCpB,EAZiC,MAMnCsB,OANmC,sBAYjCtB,EAZiC,kBAOnCmC,OAPmC,WAYjCnC,EAZiC,sBAQnCoC,OARmC,aAYjCpC,EAZiC,YASnCqC,OATmC,UAUxBd,EAETvB,EAZiC,UAWhCsC,EAXgC,6HAc/BjB,EAAQkB,cAduB,EAeqBC,oBAfrB,sBAe9BC,EAf8B,KAePC,EAfO,KAgB/BC,GAAoBvC,GAA1B,EACMwC,EAAazB,EAAc,CAC/BC,QAD+B,EAE/BC,MAF+B,EAG/BC,MAH+B,EAI/Bd,KAJ+B,EAK/Be,mBAEIsB,EAAmB,GAAH,OAAMxB,8BAAN,GAAtB,MAKIyB,EAAWT,EAAf,GAKA,OAJIH,GAAJ,IACEY,EAAWA,cAAXA,IAIA,mCACEC,MADF,EAEEC,OAFF,EAGEC,SAHF,SAIEC,aAJF,KAKEpC,SALF,WAMEC,QANF,cAOEoC,WAPF,EAQElC,eARF,SASEmC,gBAAiBR,EATnB,gBAUES,MAVF,EAWEpD,IAAKA,GAXP,IAcI0C,GAAD,IACC,uBACEW,UADF,EAEEC,SAFF,EAGErC,WAHF,EAIE6B,MAJF,EAKEC,OALF,EAME1B,MAAOsB,EAAWtB,OArBxB,IA0BIqB,GACA,qBACEa,MAAO,CAAEC,UAAW,SACpBV,MAAOrC,EAAuB,OAFhC,OAGEsC,OAHF,OAIE5C,IAJF,EAKEsD,QAAS,kBAAMhB,GAAN,WAQrBT,YAAmB,CAKjB7B,IAAKC,IALY,OAUjB6B,KAAM7B,IAVW,OAejBG,KAAMH,IAfW,OAsBjBmB,UAAWnB,IAtBM,OA2BjBe,QAASf,IA3BQ,KAiCjBiB,MAAOjB,IAjCU,OAsCjBgC,YAAahC,IAtCI,KA4CjB8B,kBAAmB9B,IA5CF,KAiDjB+B,sBAAuB/B,IAAUsD,QAGnC,Q,OE7JaC,EAA6B,kBACxC,eAACC,EAAA,EAAD,WACG,EAAC,GAAO,GAAMC,KAAI,SAACC,GAAD,OACjB,eAACF,EAAA,EAAD,CAA0BG,UAAWC,YAAW,GAAhD,UACE,eAACC,EAAA,EAAD,CAAShE,GAAG,KAAKgC,KAAM,IAAKiC,aAAcF,YAAW,GAArD,UACGF,EAAQ,QAAU,SADrB,aAGA,cAAC,EAAD,CAAQvD,KAAK,cAAc0B,KAAM,GAAId,QAAS2C,MAJrCpC,OAAOoC,OAOpB,eAACF,EAAA,EAAD,CAAMG,UAAWC,YAAW,GAA5B,UACE,cAACC,EAAA,EAAD,CAAShE,GAAG,KAAKgC,KAAM,IAAKiC,aAAcF,YAAW,GAArD,+BAGA,cAAC,EAAD,CACE7D,IAAI,8EACJI,KAAK,cACL0B,KAAM,QAGV,eAAC2B,EAAA,EAAD,CAAMG,UAAWC,YAAW,GAA5B,UACE,cAACC,EAAA,EAAD,CAAShE,GAAG,KAAKgC,KAAM,IAAKiC,aAAcF,YAAW,GAArD,iDAGA,cAACJ,EAAA,EAAD,CAAM9C,QAAQ,OAAOqD,IAAKH,YAAW,GAArC,SACG,CAAC,cAAe,kBAAmB,iBAAiBH,KAAI,SAACtD,GAAD,OACvD,cAAC,EAAD,CAAmBA,KAAMA,EAAM0B,KAAM,IAAxB1B,WAInB,eAACqD,EAAA,EAAD,CAAMG,UAAWC,YAAW,GAA5B,UACE,cAACC,EAAA,EAAD,CAAShE,GAAG,KAAKgC,KAAM,IAAKiC,aAAcF,YAAW,GAArD,yCAGA,cAAC,EAAD,CAAQzD,KAAK,cAAc0B,KAAM,GAAIZ,MAAM,aAE7C,eAACuC,EAAA,EAAD,CAAMG,UAAWC,YAAW,GAA5B,UACE,cAACC,EAAA,EAAD,CAAShE,GAAG,KAAKgC,KAAM,IAAKiC,aAAcF,YAAW,GAArD,6DAGA,eAACJ,EAAA,EAAD,CAAM9C,QAAQ,OAAOqD,IAAKH,YAAW,GAArC,UACE,cAAC,EAAD,CAAQzC,UAAU,SAAShB,KAAK,iBAAiB0B,KAAM,KACvD,cAAC,EAAD,CAAQV,UAAU,SAAShB,KAAK,iBAAiB0B,KAAM,KACvD,cAAC,EAAD,CAAQV,UAAU,SAAShB,KAAK,iBAAiB0B,KAAM,eAMzDmC,EAAUvE,eAAK8D,GACrBS,EAAQC,YAAc,UAEPD","file":"static/js/1.310e91f3.chunk.js","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\n\nconst Image = memo(\n  forwardRef(function Image(props, ref) {\n    return <Box is=\"img\" {...props} ref={ref} />\n  })\n)\n\nImage.propTypes = {\n  ...Box.propTypes,\n  src: PropTypes.string\n}\n\nexport default Image\n","export default function getInitials(name, fallback = '?') {\n  if (!name || typeof name !== 'string') return fallback\n  return name\n    .replace(/\\s+/, ' ')\n    .split(' ') // Repeated spaces results in empty strings\n    .slice(0, 2)\n    .map(v => v && v[0].toUpperCase()) // Watch out for empty strings\n    .join('')\n}\n","import React, { useState, memo, forwardRef } from 'react'\nimport { css } from 'glamor'\nimport PropTypes from 'prop-types'\nimport Box from 'ui-box'\nimport { Image } from '../../image'\nimport { Text } from '../../typography'\nimport { useTheme } from '../../theme'\nimport globalGetInitials from './utils/getInitials'\nimport globalHash from './utils/hash'\n\nconst isObjectFitSupported =\n  typeof document !== 'undefined' &&\n  'objectFit' in document.documentElement.style\n\nconst initialsStyleClass = css({\n  top: 0,\n  position: 'absolute',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n  lineHeight: 1\n}).toString()\n\nfunction getColorProps({ isSolid, theme, color, name, propsHashValue }) {\n  if (color === 'automatic') {\n    const hashValue = globalHash(propsHashValue || name)\n    return theme.getAvatarProps({ isSolid, color, hashValue })\n  }\n\n  return theme.getAvatarProps({ isSolid, color })\n}\n\nconst Avatar = memo(\n  forwardRef(function Avatar(props, ref) {\n    const {\n      src,\n      name,\n      size = 24,\n      isSolid = false,\n      color = 'automatic',\n      forceShowInitials = false,\n      sizeLimitOneCharacter = 20,\n      getInitials = globalGetInitials,\n      hashValue: propsHashValue,\n      ...restProps\n    } = props\n\n    const theme = useTheme()\n    const [imageHasFailedLoading, setImageHasFailedLoading] = useState(false)\n    const imageUnavailable = !src || imageHasFailedLoading\n    const colorProps = getColorProps({\n      isSolid,\n      theme,\n      color,\n      name,\n      propsHashValue\n    })\n    const initialsFontSize = `${theme.getAvatarInitialsFontSize(\n      size,\n      sizeLimitOneCharacter\n    )}px`\n\n    let initials = getInitials(name)\n    if (size <= sizeLimitOneCharacter) {\n      initials = initials.substring(0, 1)\n    }\n\n    return (\n      <Box\n        width={size}\n        height={size}\n        overflow=\"hidden\"\n        borderRadius={9999}\n        position=\"relative\"\n        display=\"inline-flex\"\n        flexShrink={0}\n        justifyContent=\"center\"\n        backgroundColor={colorProps.backgroundColor}\n        title={name}\n        ref={ref}\n        {...restProps}\n      >\n        {(imageUnavailable || forceShowInitials) && (\n          <Text\n            className={initialsStyleClass}\n            fontSize={initialsFontSize}\n            lineHeight={initialsFontSize}\n            width={size}\n            height={size}\n            color={colorProps.color}\n          >\n            {initials}\n          </Text>\n        )}\n        {!imageUnavailable && (\n          <Image\n            style={{ objectFit: 'cover' }} // Unsupported by ui-box directly\n            width={isObjectFitSupported ? '100%' : 'auto'} // Fallback to old behaviour on IE\n            height=\"100%\"\n            src={src}\n            onError={() => setImageHasFailedLoading(true)}\n          />\n        )}\n      </Box>\n    )\n  })\n)\n\nAvatar.propTypes = {\n  /**\n   * The src attribute of the image.\n   * When it's not available, render initials instead.\n   */\n  src: PropTypes.string,\n\n  /**\n   * The size of the avatar.\n   */\n  size: PropTypes.number,\n\n  /**\n   * The name used for the initials and title attribute.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value used for the hash function.\n   * The name is used as the hashValue by default.\n   * When dealing with anonymous users you should use the id instead.\n   */\n  hashValue: PropTypes.string,\n\n  /**\n   * When true, render a solid avatar.\n   */\n  isSolid: PropTypes.bool,\n\n  /**\n   * The color used for the avatar.\n   * When the value is `automatic`, use the hash function to determine the color.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Function to get the initials based on the name.\n   */\n  getInitials: PropTypes.func,\n\n  /**\n   * When true, force show the initials.\n   * This is useful in some cases when using Gravatar and transparent pngs.\n   */\n  forceShowInitials: PropTypes.bool,\n\n  /**\n   * When the size is smaller than this number, use a single initial for the avatar.\n   */\n  sizeLimitOneCharacter: PropTypes.number\n}\n\nexport default Avatar\n","// http://erlycoder.com/49/javascript-hash-functions-to-convert-string-into-integer-hash-\nexport default function hashCode(s) {\n  const str = String(s)\n  let hash = 0\n  let char\n  if (str.trim().length === 0) return hash\n  for (let i = 0; i < str.length; i++) {\n    char = str.charCodeAt(i)\n    hash = (hash << 5) - hash + char\n    // Convert to 32bit integer\n    hash &= hash\n  }\n\n  return Math.abs(hash)\n}\n","import React, { memo } from 'react';\nimport { Avatar, Pane, Heading, majorScale } from 'evergreen-ui';\n\nexport const AvatarsComponent: React.FC = () => (\n  <Pane>\n    {[false, true].map((solid) => (\n      <Pane key={String(solid)} marginTop={majorScale(3)}>\n        <Heading is=\"h3\" size={500} marginBottom={majorScale(1)}>\n          {solid ? 'Solid' : 'Subtle'} Avatar\n        </Heading>\n        <Avatar name=\"Fast Nguyen\" size={40} isSolid={solid} />\n      </Pane>\n    ))}\n    <Pane marginTop={majorScale(3)}>\n      <Heading is=\"h3\" size={500} marginBottom={majorScale(1)}>\n        Avatar with image\n      </Heading>\n      <Avatar\n        src=\"https://upload.wikimedia.org/wikipedia/commons/a/a1/Alan_Turing_Aged_16.jpg\"\n        name=\"Alan Turing\"\n        size={40}\n      />\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading is=\"h3\" size={500} marginBottom={majorScale(1)}>\n        Avatar with color generated by name\n      </Heading>\n      <Pane display=\"flex\" gap={majorScale(2)}>\n        {['Fast Nguyen', 'Theodore Nguyen', 'Marcus Nguyen'].map((name) => (\n          <Avatar key={name} name={name} size={40} />\n        ))}\n      </Pane>\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading is=\"h3\" size={500} marginBottom={majorScale(1)}>\n        Manually override the color\n      </Heading>\n      <Avatar name=\"Fast Nguyen\" size={40} color=\"green\" />\n    </Pane>\n    <Pane marginTop={majorScale(3)}>\n      <Heading is=\"h3\" size={500} marginBottom={majorScale(1)}>\n        Rendering anonymous users with different colors\n      </Heading>\n      <Pane display=\"flex\" gap={majorScale(2)}>\n        <Avatar hashValue=\"id_124\" name=\"Anonymous User\" size={40} />\n        <Avatar hashValue=\"id_249\" name=\"Anonymous User\" size={40} />\n        <Avatar hashValue=\"id_299\" name=\"Anonymous User\" size={40} />\n      </Pane>\n    </Pane>\n  </Pane>\n);\n\nconst Avatars = memo(AvatarsComponent);\nAvatars.displayName = 'Avatars';\n\nexport default Avatars;\n"],"sourceRoot":""}