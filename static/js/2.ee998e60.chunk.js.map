{"version":3,"sources":["../../../../src/typography/src/Strong.js","../../../../src/badges/src/Badge.js","../../../../src/badges/src/Pill.js","containers/badges/index.tsx"],"names":["Strong","memo","forwardRef","props","ref","is","fontWeight","Text","styles","display","boxSizing","height","paddingTop","paddingRight","paddingBottom","paddingLeft","borderRadius","textAlign","textDecoration","textTransform","Badge","theme","useTheme","className","color","isInteractive","isSolid","restProps","themeProps","appearance","classNames","cx","size","PropTypes","bool","Pill","colors","BadgesComponent","Pane","map","marginTop","majorScale","Heading","flexWrap","gap","String","Math","floor","random","Badges","displayName"],"mappings":"sgBAGA,IAAMA,EAASC,eACbC,sBAAW,SAAgBC,EAAOC,GAChC,OAAO,mCAAMC,GAAN,SAAkBC,WAAY,KAA9B,GAA8CF,IAAKA,SAI9DJ,Y,yWAAAA,IACKO,IADLP,WAIA,Q,ilBCPA,IAAMQ,EAAS,CACbC,QADa,eAEbC,UAFa,aAGbC,OAHa,GAIbC,WAJa,EAKbC,aALa,EAMbC,cANa,EAObC,YAPa,EAQbC,aARa,EASbC,UATa,SAUbC,eAVa,OAWbC,cAAe,aAGXC,EAAQnB,eACZC,sBAAW,SAAeC,EAAOC,GAC/B,IAAMiB,EAAQC,cAGZC,EAKEpB,EATgC,YAShCA,EATgC,MAKlCqB,OALkC,oBAShCrB,EATgC,cAMlCsB,OANkC,WAShCtB,EATgC,QAOlCuB,OAPkC,SAQ/BC,EAR+B,+DAW9BC,EAAaP,EAAA,cAAoB,CAAEG,MAAF,EAASE,YAC1CG,EAAaJ,EAAgB,cAAnC,UACMK,EAAaC,IAAGR,EAAWF,oBAAjC,IAEA,OACE,iCACEjB,IADF,EAEE4B,KAAM,KAFR,OAMET,UAAWO,SAMnBV,mBACKpB,EADLoB,eAMEI,MAAOS,IANTb,OAWEK,cAAeQ,IAAUC,OAG3B,QC5DMC,EAAOlC,eACXC,sBAAW,SAAcC,EAAOC,GAC9B,OAAO,iCAAOY,aAAP,IAA0BZ,IAAKA,GAAtC,QAIJ+B,YAAiBf,EAAjBe,UAEA,Q,OCAMC,EAAuB,CAC3B,OACA,QACA,UACA,SACA,SACA,MACA,OACA,UAGWC,EAA4B,kBACvC,eAACC,EAAA,EAAD,WACG,EAAC,GAAM,GAAOC,KAAI,SAACb,GAAD,OACjB,eAACY,EAAA,EAAD,CAA4BE,UAAWC,YAAW,GAAlD,UACE,eAACC,EAAA,EAAD,CAASrC,GAAG,KAAK2B,KAAM,IAAvB,UACGN,EAAU,QAAU,SADvB,aAGA,cAACY,EAAA,EAAD,CACEE,UAAWC,YAAW,GACtBhC,QAAQ,OACRkC,SAAS,OACTC,IAAKH,YAAW,GAJlB,SAMGL,EAAOG,KAAI,SAACf,GAAD,OACV,cAAC,EAAD,CAAmBA,MAAOA,EAAOE,QAASA,EAA1C,SACGF,GADSA,UAXPqB,OAAOnB,OAkBpB,eAACY,EAAA,EAAD,CAAME,UAAWC,YAAW,GAA5B,UACE,cAACC,EAAA,EAAD,CAASrC,GAAG,KAAK2B,KAAM,IAAvB,mBAGC,EAAC,GAAM,GAAOO,KAAI,SAACb,GAAD,OACjB,eAACY,EAAA,EAAD,CAA4BE,UAAWC,YAAW,GAAlD,UACE,eAACC,EAAA,EAAD,CAASrC,GAAG,KAAK2B,KAAM,IAAvB,UACGN,EAAU,QAAU,SADvB,YAGA,cAACY,EAAA,EAAD,CACEE,UAAWC,YAAW,GACtBhC,QAAQ,OACRkC,SAAS,OACTC,IAAKH,YAAW,GAJlB,SAMGL,EAAOG,KAAI,SAACf,GAAD,OACV,cAAC,EAAD,CAAkBA,MAAOA,EAAOE,QAASA,EAAzC,SACGoB,KAAKC,MAAsB,IAAhBD,KAAKE,WADRxB,UAXNqB,OAAOnB,cAsBpBuB,EAAShD,eAAKoC,GACpBY,EAAOC,YAAc,SAEND","file":"static/js/2.ee998e60.chunk.js","sourcesContent":["import React, { memo, forwardRef } from 'react'\nimport Text from './Text'\n\nconst Strong = memo(\n  forwardRef(function Strong(props, ref) {\n    return <Text is=\"strong\" fontWeight={600} {...props} ref={ref} />\n  })\n)\n\nStrong.propTypes = {\n  ...Text.propTypes\n}\n\nexport default Strong\n","import React, { memo, forwardRef } from 'react'\nimport cx from 'classnames'\nimport PropTypes from 'prop-types'\nimport { Strong } from '../../typography'\nimport { useTheme } from '../../theme'\n\nconst styles = {\n  display: 'inline-block',\n  boxSizing: 'border-box',\n  height: 16,\n  paddingTop: 0,\n  paddingRight: 6,\n  paddingBottom: 0,\n  paddingLeft: 6,\n  borderRadius: 2,\n  textAlign: 'center',\n  textDecoration: 'none',\n  textTransform: 'uppercase'\n}\n\nconst Badge = memo(\n  forwardRef(function Badge(props, ref) {\n    const theme = useTheme()\n\n    const {\n      className,\n      color = 'neutral',\n      isInteractive = false,\n      isSolid = false,\n      ...restProps\n    } = props\n\n    const themeProps = theme.getBadgeProps({ color, isSolid })\n    const appearance = isInteractive ? 'interactive' : 'default'\n    const classNames = cx(className, theme.getBadgeClassName(appearance))\n\n    return (\n      <Strong\n        ref={ref}\n        size={300}\n        {...styles}\n        {...themeProps}\n        {...restProps}\n        className={classNames}\n      />\n    )\n  })\n)\n\nBadge.propTypes = {\n  ...Strong.propTypes,\n\n  /**\n   * The color used for the badge.\n   */\n  color: PropTypes.string,\n\n  /**\n   * Whether or not to apply hover/focus/active styles\n   */\n  isInteractive: PropTypes.bool\n}\n\nexport default Badge\n","import React, { memo, forwardRef } from 'react'\nimport Badge from './Badge'\n\nconst Pill = memo(\n  forwardRef(function Pill(props, ref) {\n    return <Badge borderRadius={999} ref={ref} {...props} />\n  })\n)\n\nPill.propTypes = Badge.propTypes\n\nexport default Pill\n","import React, { memo } from 'react';\nimport {\n  Pill,\n  Pane,\n  Badge,\n  BadgeOwnProps,\n  majorScale,\n  Heading,\n} from 'evergreen-ui';\n\ntype BadgeColor = Exclude<BadgeOwnProps['color'], undefined>;\nconst colors: BadgeColor[] = [\n  'blue',\n  'green',\n  'neutral',\n  'orange',\n  'purple',\n  'red',\n  'teal',\n  'yellow',\n];\n\nexport const BadgesComponent: React.FC = () => (\n  <Pane>\n    {[true, false].map((isSolid) => (\n      <Pane key={String(isSolid)} marginTop={majorScale(2)}>\n        <Heading is=\"h3\" size={500}>\n          {isSolid ? 'Solid' : 'Subtle'} badges\n        </Heading>\n        <Pane\n          marginTop={majorScale(1)}\n          display=\"flex\"\n          flexWrap=\"wrap\"\n          gap={majorScale(2)}\n        >\n          {colors.map((color) => (\n            <Badge key={color} color={color} isSolid={isSolid}>\n              {color}\n            </Badge>\n          ))}\n        </Pane>\n      </Pane>\n    ))}\n    <Pane marginTop={majorScale(3)}>\n      <Heading is=\"h2\" size={700}>\n        Pills\n      </Heading>\n      {[true, false].map((isSolid) => (\n        <Pane key={String(isSolid)} marginTop={majorScale(2)}>\n          <Heading is=\"h3\" size={500}>\n            {isSolid ? 'Solid' : 'Subtle'} pills\n          </Heading>\n          <Pane\n            marginTop={majorScale(1)}\n            display=\"flex\"\n            flexWrap=\"wrap\"\n            gap={majorScale(2)}\n          >\n            {colors.map((color) => (\n              <Pill key={color} color={color} isSolid={isSolid}>\n                {Math.floor(Math.random() * 100)}\n              </Pill>\n            ))}\n          </Pane>\n        </Pane>\n      ))}\n    </Pane>\n  </Pane>\n);\n\nconst Badges = memo(BadgesComponent);\nBadges.displayName = 'Badges';\n\nexport default Badges;\n"],"sourceRoot":""}